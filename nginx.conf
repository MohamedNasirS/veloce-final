server {
    listen 80;
    server_name 147.93.27.172;

    root /usr/share/nginx/html;       # Your React build folder
    index index.html;

    # Serve React app, fallback to index.html for SPA routing
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Proxy socket.io connections to backend at 127.0.0.1:3001
    location /socket.io/ {
        proxy_pass http://127.0.0.1:3001/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_read_timeout 86400;
        proxy_send_timeout 86400;

        proxy_cache_bypass $http_upgrade;

        # IMPORTANT: Explicitly remove any potentially inherited CORS headers from Nginx.
        # This ensures the backend's headers are the only ones sent.
        # This line specifically removes the 'Access-Control-Allow-Origin' header if Nginx
        # or a higher-level config unexpectedly adds it.
        # Other CORS headers like 'Access-Control-Allow-Methods', etc., might also need to be removed
        # if they are causing issues and are not managed by the backend.
        add_header 'Access-Control-Allow-Origin' '' always;
        add_header 'Access-Control-Allow-Methods' '' always;
        add_header 'Access-Control-Allow-Headers' '' always;
        add_header 'Access-Control-Allow-Credentials' '' always;

        # When the client sends an OPTIONS preflight request,
        # Nginx should handle it by immediately sending 204 No Content
        # and letting the backend define the CORS headers in the actual response.
        # However, for Socket.IO, the initial polling request typically causes the issue.
        # The above 'add_header ... always;' with empty strings effectively removes the headers Nginx might add.
        # The NestJS backend is expected to send the correct headers in its response.
    }


    # Optionally serve static assets with cache control (adjust if needed)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        try_files $uri =404;
        expires max;
        access_log off;
    }
}