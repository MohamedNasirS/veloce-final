# nginx.conf - MODIFY THIS FILE IN YOUR PROJECT ROOT

server {
    listen 80;
    server_name 147.93.27.172; # Your VPS IP or domain name

    root /usr/share/nginx/html;       # Your React build folder inside the container
    index index.html;

    # Serve React app, fallback to index.html for SPA routing
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Proxy API requests (HTTP)
    # If your frontend calls http://147.93.27.172:3001/api, then this block is not strictly needed for HTTP API calls,
    # as they go direct to the backend. But if you want to proxy them via Nginx on port 80, use this.
    location /api/ {
        proxy_pass http://127.0.0.1:3001/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "keep-alive"; # Use keep-alive for HTTP connections
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_read_timeout 86400;
        proxy_send_timeout 86400;

        # Ensure Nginx does not add CORS headers for API.
        # Let NestJS handle CORS for its API endpoints too.
        add_header 'Access-Control-Allow-Origin' '' always;
        add_header 'Access-Control-Allow-Methods' '' always;
        add_header 'Access-Control-Allow-Headers' '' always;
        add_header 'Access-Control-Allow-Credentials' '' always;
    }


    # Proxy socket.io connections to backend at 127.0.0.1:3001
    location /socket.io/ {
        proxy_pass http://127.0.0.1:3001/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade"; # Required for WebSockets
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_read_timeout 86400;
        proxy_send_timeout 86400;

        proxy_cache_bypass $http_upgrade;

        # MORE ROBUST CORS HANDLING FOR PROXIED SOCKET.IO
        # This is critical. For OPTIONS preflight requests, immediately return 204.
        # This allows the browser to proceed with the actual GET/POST request,
        # where your backend will then send the correct CORS headers.
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'http://147.93.27.172'; # Explicitly allow client origin for preflight
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Accept';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Content-Length' '0';
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            return 204;
        }

        # For actual requests (GET/POST for polling or WebSocket upgrade),
        # ensure Nginx doesn't add its own CORS headers. Let the backend handle them.
        add_header 'Access-Control-Allow-Origin' '' always;
        add_header 'Access-Control-Allow-Methods' '' always;
        add_header 'Access-Control-Allow-Headers' '' always;
        add_header 'Access-Control-Allow-Credentials' '' always;
    }


    # Optionally serve static assets with cache control (adjust if needed)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        try_files $uri =404;
        expires max;
        access_log off;
    }
}