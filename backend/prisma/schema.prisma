generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum Role {
  waste_generator
  recycler
  aggregator
  admin
}

enum BidStatus {
  PENDING    // Generator submitted
  APPROVED   // Admin approved
  LIVE       // Auction started
  CLOSED     // Auction ended
  CANCELLED  // If bid withdrawn or admin action
}

model User {
  id                   String           @id @default(cuid())
  name                 String
  email                String           @unique
  password             String
  phone                String
  company              String
  role                 Role
  address              String
  registrationNumber   String?
  taxId                String?
  description          String?
  isApproved           Boolean          @default(false)

  documents            UserDocument?

  bidsCreated          Bid[]            @relation("BidCreator")
  bidsParticipated     BidParticipant[]
  bidsWon              Bid[]            @relation("BidWinner")
  bidEvents            BidEvent[]       // ðŸ”¥ NEW: relation to BidEvent

  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
}

model UserDocument {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id])

  gstCertificatePath      String
  panCardPath             String
  bankDocumentPath        String
  authorizedSignatoryPath String?
  companyRegistrationPath String

  uploadedAt              DateTime @default(now())
}

model Bid {
  id           String           @id @default(cuid())
  lotName      String
  description  String
  wasteType    String
  quantity     Float
  unit         String
  location     String
  basePrice    Float
  minIncrementPercent Float @default(0) 
  currentPrice Float
  startDate    DateTime
  endDate      DateTime
  status       BidStatus        @default(PENDING)
  creatorId    String
  creator      User             @relation("BidCreator", fields: [creatorId], references: [id])
  images       BidImage[]
  participants BidParticipant[]
  winnerId     String?
  winner       User?            @relation("BidWinner", fields: [winnerId], references: [id])
  gatePassPath String?          // Field for gate pass
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  events       BidEvent[]       // ðŸ”¥ NEW: relation to BidEvent
}

model BidImage {
  id    String @id @default(cuid())
  bidId String
  path  String
  bid   Bid    @relation(fields: [bidId], references: [id])
}

model BidParticipant {
  id        String   @id @default(cuid())
  bidId     String
  userId    String
  amount    Float
  bid       Bid      @relation(fields: [bidId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([bidId, userId])
}

model BidEvent {
  id        String   @id @default(cuid())
  bidId     String
  userId    String?            // null for system events (e.g., base price entry)
  amount    Float
  type      BidEventType       // ðŸ”¥ ADD THIS LINE
  createdAt DateTime @default(now())

  bid       Bid      @relation(fields: [bidId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([bidId])
}

enum BidEventType {
  BASE_PRICE
  BID_PLACED
  WINNER_SELECTED
}

